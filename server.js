require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const express = require('express');
const fs = require('fs');
const cors = require('cors');
const axios = require('axios');

const app = express();
const PORT = 6300;
const FILE_PATH = 'products.json'; // –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É

app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Bitrix24
// async function fetchProducts() {
//     console.log('–ó–∞–ø—Ä–æ—Å –∫ Bitrix24 API...');

    // const storeResponse = await axios.get(`https://b24-8cgsys.bitrix24.kz/rest${process.env.BITRIX_API_KEY}catalog.storeproduct.list`, {
    //   params: {
        
    //     select: [
    //       'id',
    //       'productId', // ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    //       'amount', // –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ —Å–∫–ª–∞–¥—É
    //       'storeId' // ID —Å–∫–ª–∞–¥–∞
    //     ],
    //   }
    // }); 

    // const productSelects = ["ACTIVE", "CATALOG_ID", "CODE", "CREATED_BY", "CURRENCY_ID", "DATE_CREATE", "DESCRIPTION", "DESCRIPTION_TYPE", "DETAIL_PICTURE", "ID", "MEASURE", "MODIFIED_BY", "NAME", "PREVIEW_PICTURE", "PRICE", "PROPERTY_44", "PROPERTY_50", "PROPERTY_52", "PROPERTY_54", "PROPERTY_56", "PROPERTY_58", "PROPERTY_60", "PROPERTY_62", "PROPERTY_64", "PROPERTY_66", "PROPERTY_68", "PROPERTY_70", "PROPERTY_72", "PROPERTY_74", "PROPERTY_76", "PROPERTY_78", "PROPERTY_80", "PROPERTY_82", "PROPERTY_84", "PROPERTY_86", "PROPERTY_88", "SECTION_ID", "SORT", "TIMESTAMP_X", "VAT_ID", "VAT_INCLUDED", "XML_ID"];
    // const allProducts = [];
    // let start = 0;
    // let total = 0;
  
    // try {
    //   do {
    //     const response = await axios.get(`https://b24-8cgsys.bitrix24.kz/rest${process.env.BITRIX_API_KEY}crm.product.list`, {
    //       params: {
    //         filter: { iblockId: 16 },
    //         select: productSelects,
    //         start: start,
    //       },
    //     });

    //     const storeQuantity = await axios.get(`https://b24-8cgsys.bitrix24.kz/rest${process.env.BITRIX_API_KEY}catalog.storeproduct.list`, {
    //       params: {
    //         filter: { productId: response.data.result[i].ID},
    //         start: start,
    //       },
    //     });
  
    //     total = response.data.total;
    //     start += 50;
  
    //     // console.log('–û—Ç–≤–µ—Ç –æ—Ç Bitrix24:', response.data);
  
    //     if (!response.data.result || response.data.result.length === 0) {
    //       console.warn('Bitrix24 –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤!');
    //       break;
    //     }
        
    //     console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–∞ ${storeQuantity.data}`);

    //     allProducts.push(...mainData);
  
    //     if (response.data.total < 50) {
    //       break;
    //     }
    //   } while (start < total);
      
    //   console.log(allProducts.length);

    //   fs.writeFileSync(FILE_PATH, '', 'utf-8');

    //   // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–∞–π–ª
    //   fs.writeFileSync(FILE_PATH, JSON.stringify(allProducts, null, 2), 'utf-8');
    //   console.log(`‚úÖ –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ${FILE_PATH}`);
    //   return allProducts;
    // } catch (error) {
    //   console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitrix24:', error);
    //   return [];
    // }
  // }

  async function fetchProducts() {
    console.log('–ó–∞–ø—Ä–æ—Å –∫ Bitrix24 API...');
    const productSelects = ["ACTIVE", "CATALOG_ID", "CODE", "CREATED_BY", "CURRENCY_ID", "DATE_CREATE", "DESCRIPTION", "DESCRIPTION_TYPE", "DETAIL_PICTURE", "ID", "MEASURE", "MODIFIED_BY", "NAME", "PREVIEW_PICTURE", "PRICE", "PROPERTY_44", "PROPERTY_50", "PROPERTY_52", "PROPERTY_54", "PROPERTY_56", "PROPERTY_58", "PROPERTY_60", "PROPERTY_62", "PROPERTY_64", "PROPERTY_66", "PROPERTY_68", "PROPERTY_70", "PROPERTY_72", "PROPERTY_74", "PROPERTY_76", "PROPERTY_78", "PROPERTY_80", "PROPERTY_82", "PROPERTY_84", "PROPERTY_86", "PROPERTY_88", "SECTION_ID", "SORT", "TIMESTAMP_X", "VAT_ID", "VAT_INCLUDED", "XML_ID"];
    const allProducts = [];
    let start = 0;
    let total = 0;
  
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
      do {
        const productResponse = await axios.get(
          `https://b24-8cgsys.bitrix24.kz/rest${process.env.BITRIX_API_KEY}crm.product.list`, 
          {
            params: {
              filter: { iblockId: 16 },
              select: productSelects,
              start: start,
            },
          }
        );
  
        const products = productResponse.data.result || [];
        if (products.length === 0) break;
  
        allProducts.push(...products);
        start += products.length;
        total = productResponse.data.total;
      } while (start < total);
  
      // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏
      const stockItems = [];
      let startStock = 0;
      let totalStock = 0;
      
      do {
        const storeResponse = await axios.get(
          `https://b24-8cgsys.bitrix24.kz/rest${process.env.BITRIX_API_KEY}catalog.storeproduct.list`,
          {
            params: {
              select: ['productId', 'amount'],
              start: startStock,
            }
          }
        );
  
        const stores = storeResponse.data.result.storeProducts || [];
        stockItems.push(...stores);
        startStock += stores.length;
        totalStock = storeResponse.data.total;
      } while (startStock < totalStock);
  
      // 3. –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –æ—Å—Ç–∞—Ç–∫–æ–≤
      const stockMap = stockItems.reduce((acc, item) => {
        const productId = item.productId;
        const amount = item.amount !== null ? item.amount : 0;
        acc[productId] = (acc[productId] || 0) + amount;
        return acc;
      }, {});
  
      // 4. –û–±–æ–≥–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã
      const enrichedProducts = allProducts.map(product => ({
        ...product,
        STOCK_AMOUNT: stockMap[product.ID] || 0
      }));
  
      // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
      fs.writeFileSync(FILE_PATH, JSON.stringify(enrichedProducts, null, 2));
      return enrichedProducts;
  
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error.response?.data || error.message);
      return [];
    }
  }



// '/qareket/api/update-products'
// –ù–û–í–´–ô –º–∞—Ä—à—Ä—É—Ç: –æ–±–Ω–æ–≤–∏—Ç—å JSON-—Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é
app.post('/qareket/api/update-products', async (req, res) => {
  console.log('‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º products.json...');
  const products = await fetchProducts();
  if (products.length > 0) {
    res.json({ message: '–¢–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã', count: products.length });
  } else {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// –ù–û–í–´–ô –º–∞—Ä—à—Ä—É—Ç: –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞
// '/qareket/api/products'
app.post('/qareket/api/products', (req, res) => {
  console.log('üìÇ –ó–∞–ø—Ä–æ—Å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É JSON...');
  if (!fs.existsSync(FILE_PATH)) {
    return res.status(404).json({ error: '–§–∞–π–ª products.json –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  try {
    const data = fs.readFileSync(FILE_PATH, 'utf-8');
    const products = JSON.parse(data);
    // const products = data;


    res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');

    res.json({ products });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});