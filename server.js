require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const express = require('express');
const fs = require('fs');
const cors = require('cors');
const axios = require('axios');

const app = express();
const PORT = 6300;
const FILE_PATH = 'products.json'; // –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É

app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Bitrix24
async function fetchProducts() {
    console.log('–ó–∞–ø—Ä–æ—Å –∫ Bitrix24 API...');
    const allProducts = [];
    let start = 0;
    let total = 0;
  
    try {
      do {
        const response = await axios.get(`https://b24-mrp6op.bitrix24.kz/rest/${process.env.BITRIX_API_KEY}/crm.product.list`, {
          params: {
            filter: { iblockId: 17 },
            select: [
              "ACTIVE",
              "CATALOG_ID",
              "CODE",
              "CREATED_BY",
              "CURRENCY_ID",
              "DESCRIPTION",
              "DESCRIPTION_TYPE",
              "DETAIL_PICTURE",
              "ID",
              "MEASURE",
              "MODIFIED_BY",
              "NAME",
              "PREVIEW_PICTURE",
              "PRICE",
              "PROPERTY_45",
              "PROPERTY_107",
              "PROPERTY_109",
              "PROPERTY_111",
              "PROPERTY_113",
              "PROPERTY_115",
              "PROPERTY_117",
              "PROPERTY_119",
              "PROPERTY_123",
              "PROPERTY_125",
              "PROPERTY_127",
              "PROPERTY_129",
              "PROPERTY_131",
              "PROPERTY_133",
              "PROPERTY_135",
              "PROPERTY_137",
              "PROPERTY_139",
              "PROPERTY_141",
              "PROPERTY_143",
              "PROPERTY_145",
              "PROPERTY_147",
              "SECTION_ID",
              "SORT",
              "TIMESTAMP_X",
              "VAT_ID",
              "VAT_INCLUDED",
              "XML_ID",
            ],
            start: start,
          },
        });
  
        total = response.data.total;
        start += 50;
  
        console.log('–û—Ç–≤–µ—Ç –æ—Ç Bitrix24:', response.data);
  
        if (!response.data.result || response.data.result.length === 0) {
          console.warn('Bitrix24 –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤!');
          break;
        }
  
        allProducts.push(...response.data.result);
  
        if (response.data.total < 50) {
          break;
        }
      } while (start < total);
      
      console.log(allProducts.length);

      fs.writeFileSync(FILE_PATH, '', 'utf-8');

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–∞–π–ª
      fs.writeFileSync(FILE_PATH, JSON.stringify(allProducts, null, 2), 'utf-8');
      console.log(`‚úÖ –¢–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ${FILE_PATH}`);
      return allProducts;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitrix24:', error);
      return [];
    }
  }

// –ù–û–í–´–ô –º–∞—Ä—à—Ä—É—Ç: –æ–±–Ω–æ–≤–∏—Ç—å JSON-—Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é
app.post('/api/update-products', async (req, res) => {
  console.log('‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º products.json...');
  const products = await fetchProducts();
  if (products.length > 0) {
    res.json({ message: '–¢–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã', count: products.length });
  } else {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// –ù–û–í–´–ô –º–∞—Ä—à—Ä—É—Ç: –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞
app.post('/api/products', (req, res) => {
  console.log('üìÇ –ó–∞–ø—Ä–æ—Å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É JSON...');
  if (!fs.existsSync(FILE_PATH)) {
    return res.status(404).json({ error: '–§–∞–π–ª products.json –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  try {
    const data = fs.readFileSync(FILE_PATH, 'utf-8');
    const products = JSON.parse(data);

    res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');

    res.json({ products });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
